/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package myDemoApp;
import java.util.ArrayList;
import static spark.Spark.get;
  import static spark.Spark.port;
  import static spark.Spark.post;

  import java.util.ArrayList;
  import java.util.HashMap;
  import java.util.Map;

  import spark.ModelAndView;
  import spark.template.mustache.MustacheTemplateEngine;

public class App {

    public static int toplam(ArrayList<Integer> array, int baslangic, int son) {
        System.out.println("Sum positive numbers in a given index range");
        if (array == null) return -1;

        if(baslangic > array.size() - 1 || son > array.size() || baslangic > son){
            return -1;
        }

        if(son == baslangic){
            return -1;
        }

        int toplam = 0;
    
        for (int i = baslangic; i < son; i++) {
           toplam += array.get(i);
        }
        return toplam;
    }




    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        port(getHerokuAssignedPort());

        get("/", (req, res) -> "Sum Positive Numbers In A Given Index Range");

        post("/compute", (req, res) -> {
          System.out.println(req.queryParams("input1"));
          System.out.println(req.queryParams("input2"));

          String input1 = req.queryParams("input1");
          java.util.Scanner sc1 = new java.util.Scanner(input1);
          sc1.useDelimiter("[;\r\n]+");
          java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
          while (sc1.hasNext())
          {
            int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
            inputList.add(value);
          }
          sc1.close();
          System.out.println(inputList);


          String input2 = req.queryParams("input2").replaceAll("\\s","");
          int input2AsInt = Integer.parseInt(input2);

          String input3 = req.queryParams("input3").replaceAll("\\s","");
          int input3AsInt = Integer.parseInt(input3);

          int result = App.toplam(inputList, input2AsInt,input3AsInt);

          Map<String, Integer> map = new HashMap<String, Integer>();
          map.put("result", result);
          return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());


        get("/compute",
            (rq, rs) -> {
              Map<String, String> map = new HashMap<String, String>();
              map.put("result", "not computed yet!");
              return new ModelAndView(map, "compute.mustache");
            },
            new MustacheTemplateEngine());
    }

    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; //return default port if heroku-port isn't set (i.e. on localhost)

    }
}
